/*
 *************************************************************
	exploratory data analysis
 *************************************************************
 
 Identifying Measures and Dimensions in the data 
	- Measures : sales_amount, cost, quantity, price, order_number etc
	- Dimesions : country, date, customers, category, products, gender etc
*/

----------------------------------------------------------------
-- Data Base Exploratory
----------------------------------------------------------------

SELECT * FROM INFORMATION_SCHEMA.TABLES;
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'gold.dim_customers';

----------------------------------------------------------------
-- Dimensions Exploratory 
----------------------------------------------------------------

-- Exploring the country of the customers
SELECT DISTINCT country FROM [gold.dim_customers];

-- Exploring products table
SELECT DISTINCT category FROM [gold.report_products]; -- 4 product categories
SELECT DISTINCT subcategory FROM [gold.report_products]; -- 17 product subcategories
SELECT DISTINCT product_name FROM [gold.report_products]; -- 130 products

-- Exploring the date
SELECT MIN(order_date) first_order_date, 
MAX(order_date) last_order_date FROM [gold.fact_sales]; -- start date 2010 to 2014

SELECT DATEDIFF(month,MIN(order_date),MAX(order_date)) total_sales_months
FROM [gold.fact_sales]; -- 37 months of sales

-- Youngest and oldest customers
SELECT MIN(birthdate) as oldest_customer, 
CONCAT (DATEDIFF(year, MIN(birthdate), GETDATE()),' ', 'old') as oldest_customer_age,
MAX(birthdate) youngest_customer,
CONCAT (DATEDIFF(year, MAX(birthdate), GETDATE()),' ','old') as youngest_customer_age
FROM [gold.dim_customers];

----------------------------------------------------------------
-- Measures Exploratory 
----------------------------------------------------------------

-- What is the total sales
SELECT SUM(sales_amount) as total_sales 
FROM [gold.fact_sales]; -- $ 29,356,250.00 

-- What is the total items sold
SELECT SUM(quantity) as total_quantity_sold 
FROM [gold.fact_sales]; -- 60423 units sold

-- What is the Average Selling Price (ASP)
SELECT AVG(sales_amount) as AVG_price_sales 
FROM [gold.fact_sales]; -- ASP is equal to $486 

-- What is the total number of orders 
SELECT COUNT(order_number) as total_orders
FROM [gold.fact_sales];
SELECT COUNT(DISTINCT order_number) as total_orders
FROM [gold.fact_sales]; -- 27659 orders 

-- What is the Average Product Cost 
SELECT AVG(cost) as AVG_cost 
FROM [gold.report_products]; -- APC is equal to $661

-- What is the total number of products
SELECT COUNT(product_key) as total_products FROM [gold.report_products];
SELECT COUNT(DISTINCT product_key) FROM [gold.report_products]; -- 130 products

-- What is the total number of customers 
SELECT COUNT (customer_key) as total_custoers FROM [gold.dim_customers] ; -- 18484 customers

-- What is the total number of customers who have placed an order
SELECT COUNT (DISTINCT customer_key) as customer_who_orders
FROM [gold.fact_sales]; -- 18484 customers

-- Create measures report in union all

SELECT 'Total Sales' as Measures, SUM(sales_amount) as Amounts
FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Quantity' as Measure, SUM(quantity)  
FROM [gold.fact_sales]
UNION ALL
SELECT 'AVG_price_sales' as Measure, AVG(sales_amount) 
FROM [gold.fact_sales]
UNION ALL
SELECT 'AVG_cost' as Measure, AVG(cost) 
FROM [gold.report_products]
UNION ALL
SELECT 'Total_orders' as Measure, COUNT(DISTINCT order_number)  
FROM [gold.fact_sales]
UNION ALL
SELECT 'customer_who_place_an_order' as Measure,
COUNT (DISTINCT customer_key) 
FROM [gold.fact_sales]

----------------------------------------------------------------
-- Magnitute Analysis : Comparing the Measures by the Dimensions 
----------------------------------------------------------------

-- What is the total customers by countries
SELECT country, COUNT(customer_key) as total_customers
FROM [gold.dim_customers]
GROUP BY country
ORDER BY COUNT(customer_key) DESC;

-- What is the total customers by gender
SELECT gender, COUNT(customer_key) as gender
FROM [gold.dim_customers]
GROUP BY gender
ORDER BY COUNT(customer_key) DESC;

-- What is the total product by category
SELECT 
category, COUNT(product_key) as total_products 
FROM [gold.report_products]
GROUP BY category;

-- What is the average cost in each category
SELECT 
category, AVG(cost) as Avg_cost 
FROM [gold.report_products]
GROUP BY category
ORDER BY AVG(cost) DESC;

-- What is the total revenue generated by each category
SELECT 
p.category, SUM(s.sales_amount) as total_revenue
FROM [gold.fact_sales] s
LEFT JOIN [gold.report_products] p
	ON s.product_key = p.product_key
GROUP BY category
ORDER BY SUM(s.sales_amount) DESC;

-- What is the total revenue generated by each customer
SELECT 
c.customer_key, CONCAT(c.last_name,'-', c.first_name) as customer_name,
SUM(s.sales_amount) as total_revenue
FROM [gold.fact_sales] s
LEFT JOIN [gold.dim_customers] c 
	ON s.customer_key = c.customer_key
GROUP BY c.customer_key,CONCAT(c.last_name,'-', c.first_name)
ORDER BY SUM(s.sales_amount) DESC;

-- What is the distribution of sold items across countries 
SELECT 
c.country, SUM(s.quantity) as total_quantity
FROM [gold.fact_sales] s
LEFT JOIN [gold.dim_customers] c 
	ON s.customer_key = c.customer_key
GROUP BY c.country;

----------------------------------------------------------------
-- Ranking Analysis  
----------------------------------------------------------------

-- What is the top five product with the highest sales amount
WITH product_ranking AS
(
	SELECT 
	p.product_name, SUM(s.sales_amount) as total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount) DESC) as Ranking
	FROM [gold.fact_sales] s
	LEFT JOIN [gold.report_products] p
		ON s.product_key = p.product_key
	GROUP BY p.product_name
)
SELECT *
FROM product_ranking
WHERE Ranking <= 5;

-- What is the top five product with the lowest sales amount
SELECT *
FROM(
	SELECT 
	p.product_name, SUM(s.sales_amount) as total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount) ASC) as Ranking
	FROM [gold.fact_sales] s
	LEFT JOIN [gold.report_products] p
		ON s.product_key = p.product_key
	GROUP BY p.product_name) Ranking
WHERE Ranking <= 5;